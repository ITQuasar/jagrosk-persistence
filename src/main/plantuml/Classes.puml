@startuml

class PersistenceUnit {
    + getRepository(E extends Entity): Repository
}
PersistenceUnit --> Repository

interface EntityAttribute {
    + fooBar: String
    + type: Class<?>
}

interface Entity <I> {
    '<I, E extends Entity> {
    + getID(): I
    + identityEquals(Entity<I>)
    + identityHashCode()
    '+ getIDClass(): Class<I>
    '+ getEntityClass() Class<E>
}

class RepositoryResult<I, E extends Entity<I>> {
    + repository: Repository<I, E>
    + success: boolean
    + message: String, ""
}

interface Repository<E extends Entity> {
    + add(E): RepositoryResult<I, E>
    + remove(I): RepositoryResult<I, E>
    + update(E): RepositoryResult<I, E>
    + listAll(): List<E>
    ===
    + findById(I): Optional<E>
    + findBy(String, Object): List<E>
    + findBy(RepositoryPredicate): List<E>
}

enum PredicateOperation {
  AND, OR
  EQUALS, IN, NOT, LIKE, ILIKE
  LT, LE, GT, GE
}

interface RepositoryPredicate<?> {
    + operation: PredicateOperation
    + value: ?
}

class OneShotRepository extends Repository {
    MUST HAVE A TRANSACTION INSIDE
    - repository: Repository
    + OneShotRepository()
    + OneShotRepository(Repository)
}
note bottom of OneShotRepository
    Operations are atomic and isolated
    Each save/update are transactioned
end note

RepositoryPredicate -> PredicateOperation
Repository ----> RepositoryResult
Repository -> RepositoryPredicate
Repository --> EntityAttribute
Repository ---> Entity


class DBRepository extends Repository
class JPARepository extends DBRepository {
  + findBy(Attribute, Object): Optional<E>
}
'class HibernateRepository extends DBRepository

enum FileHandler {
  JSON, YAML, XML, ...
}

class FileRepository extends Repository {
  + fileHandler: FileHandler
}

FileRepository --> FileHandler


'class JSONRepository extends FileRepository
'class YAMLRepository extends FileRepository
'class XMLRepository extends FileRepository

'''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''

interface Transaction {
    - transactionBody
    + Transaction(TransactionBody)
    ~ start()
    ~ end()
    + execute()
    + getRepository(Class<? extends Entity>)
}

interface TransactionBody {
    + transaction(Transaction)
}

Transaction --> TransactionBody

interface DBTransaction extends Transaction
class JPATransaction extends DBTransaction
'class HibernateTransaction extends DBTransaction

class FileTransaction extends Transaction

@enduml
